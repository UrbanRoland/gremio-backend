extend type Query {
    findAllIssuesByTitle(title: String, first: Int, after: String, last: Int, before: String): IssueConnection
    findIssuesByFilter(issueFilter: IssueFilter): PageableResponse
    findIssueById(id:ID!): Issue
}

extend type Mutation {
    createIssue(issue: IssueInput!): Issue
}

type Issue {
    id: ID!
    assignee: [User]
    title: String!
    due: LocalDateTime
    project: Project
    description: String
    status: IssueStatus
}

enum IssueStatus {
    PASSED
    FAILED
    REVIEW
}

type IssueConnection {
    edges: [IssueEdge]!
    pageInfo: PageInfo!
}

type IssueEdge {
    node: Issue!
    cursor: String!
}

type PageInfo {
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
    startCursor: String
    endCursor: String
}

input IssueFilter {
    title: String
    description: String
    status: IssueStatus
}

input IssueInput {
    title: String
    due: LocalDateTime
    projectId: ID
    description: String
    status: IssueStatus
}